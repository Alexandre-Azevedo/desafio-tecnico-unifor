services:
  postgres:
    image: postgres:15
    container_name: desafio_postgres
    environment:
      POSTGRES_USER: desafio_user
      POSTGRES_PASSWORD: desafio_pass
      POSTGRES_DB: desafio_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.3
    container_name: desafio_keycloak
    command: start-dev --import-realm
    environment:
      KEYCLOAK_ADMIN: admin@unifor.br
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/desafio_db
      KC_DB_USERNAME: desafio_user
      KC_DB_PASSWORD: desafio_pass
    ports:
      - "8080:8080"
    volumes:
      - ./realm-desafio.json:/opt/keycloak/data/import/realm-desafio.json
    depends_on:
      - postgres
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/realms/desafio']
      interval: 5s
      timeout: 5s
      retries: 30

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: desafio_backend
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/desafio_db
      QUARKUS_DATASOURCE_USERNAME: desafio_user
      QUARKUS_DATASOURCE_PASSWORD: desafio_pass
      QUARKUS_OIDC_AUTH_SERVER_URL: http://keycloak:8080/realms/desafio
      #QUARKUS_OIDC_AUTH_SERVER_URL: http://localhost:8080/realms/desafio
    ports:
      - "8081:8081"
    depends_on:
      keycloak:
        condition: service_healthy
      postgres:
        condition: service_started
    command: ["./wait-for-it.sh", "keycloak:8080", "--", "java", "-jar", "app.jar"]

  #frontend:
    #build:
      #context: ./frontend
      #dockerfile: Dockerfile
    #container_name: desafio_frontend
    #ports:
      #- "4200:80"
    #depends_on:
      #- backend

volumes:
  pgdata:
